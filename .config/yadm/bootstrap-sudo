#!/bin/bash

if grep -q Raspbian /etc/os-release 2> /dev/null
then
  DOTFILES_LITE=1
fi

if [ -x "$(command -v lsb_release)" ] && [[ `lsb_release -si` == 'Ubuntu' ]]; then
  OS_UBUNTU=1
fi

###############################################################################
# Linux (and Windows Subsystem for Linux)                                     #
###############################################################################
if [[ `uname` == 'Linux' ]]; then
  if ! [ -x "$(command -v add-apt-repository)" ]; then
    sudo apt install -y software-properties-common
  fi
  # add repo to get newest git
  sudo add-apt-repository -y ppa:git-core/ppa
  # add repo to get newest tmux
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo apt update
  sudo apt full-upgrade -y
  # eventually remove the removals
  sudo apt remove -y fasd
  # tmux-next, ripgrep and bat are absent from raspbian
  apps="
    zsh
    git
    git-crypt
    yadm
    vim
    tmux
    tmux-next
    highlight
    trash-cli
    ripgrep
    bat
    tree
    tig
    aptitude
    tmpreaper
  "
  for app in $apps
  do
    if ! dpkg-query -l $app > /dev/null
    then
      sudo apt install -y $app
    fi
  done

  if [ -z "$DOTFILES_LITE" ]
  then
    sudo apt install -y \
      direnv \
      build-essential \
      python-pip \
      python3-pip \
      cargo \
      nethack-console \
      fortune-mod \

    sudo -H pip install --upgrade pip
    sudo -H pip3 install --upgrade pip
    sudo -H pip install virtualenv virtualenvwrapper
    sudo -H pip3 install thefuck
  fi

  sudo apt autoremove --yes

  # overwrite old tmux
  if [ -f /usr/bin/tmux-next ]; then
    sudo ln -sf /usr/bin/tmux-next /usr/bin/tmux
  fi

  if ! [ -x "$(command -v git-lfs)" ]; then
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
  fi
  sudo apt install git-lfs
  if [ -x "$(command -v git-lfs)" ]; then
    git lfs install --skip-smudge
  fi

  if [ -n "$OS_UBUNTU" ]; then
    cargo install hyperfine
  fi

  # do some cleanup
  trash-empty 30
  # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
  ~/bin/trash-empty-wsl +30
  sudo tmpreaper --all --showdeleted 30d /tmp

  # remove cron warning
  sudo sed -i~ 's/^SHOWWARNING=true$/# SHOWWARNING=true/' /etc/tmpreaper.conf

  # remove the booring and verbose standard motd
  if [ -f /etc/motd ] && ! [ -f /etc/motd\~ ]; then
    pushd /etc
    sudo mv motd motd\~
    sudo touch motd
    popd
  fi

  if  [[ $SHELLNAME != zsh ]];
  then
    chsh -s $(which zsh)
  fi

  if [ -z "$DOTFILES_LITE" ]
  then
    # haskell
    if ! [ -x "$(command -v stack)" ]; then
      wget -qO- https://get.haskellstack.org/ | sh
    fi

    # install nodebrew, node version manager
    if ! [ -x "$(command -v nodebrew)" ]; then
      curl -L git.io/nodebrew | perl - setup
    fi
  fi

  # install fuzzy matcher (^R, **)
  if ! [ -x "$(command -v fzf)" ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install
  fi

  # when it is needed, this updates the OS, so it will take a LONG time
  if [ -x "$(command -v do-release-upgrade)" ]; then
    sudo do-release-upgrade
  fi

  # no more Linux related things to do
  exit 0
fi
###############################################################################
# macOS
###############################################################################

# overriding original path /usr/bin:/bin:/usr/sbin:/sbin with ${PATH_OVERRIDE} so that gpg and node will be on path for spotlight launched programs"
PATH_OVERRIDE=$(getconf PATH):${HOME}/bin:${HOME}/.nodebrew/current/bin:/usr/local/bin
sudo launchctl config user path $PATH_OVERRIDE

# if xcode has just been manually installed
sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

sudo git lfs install --system

# stop startup sound
sudo nvram SystemAudioVolume=%80
sudo xcodebuild -license accept
# Add Watch Simulator to Launchpad
sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app" "/Applications/Simulator.app"

# speed up time machine backups until next reboot
sudo sysctl debug.lowpri_throttle_enabled=0

###############################################################################
# installations for Klarna
###############################################################################
sudo gem install cocoapods
yes | sudo gem install bundler
yes | sudo gem update --system
yes | sudo gem update

###############################################################################
# bash4
###############################################################################
if ! grep -q "/usr/local/bin/bash" "/etc/shells"; then
   sudo sh -c 'echo /usr/local/bin/bash >> /etc/shells'
fi
# chsh -s /usr/local/bin/bash $SUDO_USER

###############################################################################
# zsh
###############################################################################
if ! grep -q "/usr/local/bin/zsh" "/etc/shells"; then
   sudo sh -c 'echo /usr/local/bin/zsh >> /etc/shells'
fi
chsh -s /usr/local/bin/zsh $SUDO_USER

sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "This Mac belongs to Klas Mellbourn.\ne-mail: klas@mellbourn.net phone: +46 708 80 00 00\nReward offered for return of this Mac. No questions asked."
###############################################################################
# Update App Store apps
###############################################################################
# enable automatically "Install app updates" from the Mac App Store
sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool TRUE
# enable automatically "install macOS updates"
sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdateRestartRequired -bool TRUE

# this will not install major updates, e.g. Catalina
sudo softwareupdate --schedule on
sudo softwareupdate -i -a --restart

# always boot in verbose mode (not MacOS GUI mode)
sudo nvram boot-args="-v"

# Enable firewall. Possible values:
#   0 = off
#   1 = on for specific sevices
#   2 = on for essential services
sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1

# allow remote login
sudo systemsetup -setremotelogin on

# run customer specific bootstrap
. ${XDG_CONFIG_HOME:-$HOME/.config}/yadm/bootstrap-sudo-customer
