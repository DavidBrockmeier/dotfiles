#!/bin/bash

set -e

if grep -q Raspbian /etc/os-release 2>/dev/null; then
  DOTFILES_LITE=1
fi

if [ -x "$(command -v lsb_release)" ] && [[ $(lsb_release -si) == 'Ubuntu' ]]; then
  OS_UBUNTU=1
  if dpkg -l ubuntu-desktop >/dev/null; then
    UBUNTU_DESKTOP=1
  fi
fi

export PROCESSOR_ARCHITECTURE=${PROCESSOR_ARCHITECTURE:-$(uname -p)}

###############################################################################
# Linux (and Windows Subsystem for Linux)                                     #
###############################################################################
if [[ $(uname) == 'Linux' ]]; then
  if ! [ -x "$(command -v add-apt-repository)" ]; then
    sudo apt install -y software-properties-common
  fi
  set +e
  # add repo to get newest git
  sudo add-apt-repository -y ppa:git-core/ppa
  # add repo to get newest tmux
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo apt update
  sudo apt full-upgrade -y
  # eventually remove the removals
  sudo apt remove -y fasd
  # tmux-next, ripgrep and bat are absent from raspbian
  apps="
    zsh
    git
    git-crypt
    yadm
    vim
    tmux
    tmux-next
    highlight
    trash-cli
    zoxide
    ripgrep
    bat
    fd-find
    tree
    tig
    aptitude
    lnav
    tmpreaper
  "
  for app in $apps; do
    if ! dpkg-query -l $app >/dev/null; then
      sudo apt install -y $app
    fi
  done

  if [ -z "$DOTFILES_LITE" ]; then
    sudo apt install -y \
      direnv \
      build-essential \
      python-pip \
      python3-pip \
      cargo \
      fortune-mod

    sudo -H pip install --upgrade pip
    sudo -H pip3 install --upgrade pip
    sudo -H pip install virtualenv virtualenvwrapper
    sudo -H pip3 install thefuck
  fi
  set -e

  sudo apt autoremove --yes

  # overwrite old tmux
  if [ -f /usr/bin/tmux-next ]; then
    sudo ln -sf /usr/bin/tmux-next /usr/bin/tmux
  fi

  if ! [ -x "$(command -v git-lfs)" ]; then
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
  fi
  sudo apt install git-lfs || true
  if [ -x "$(command -v git-lfs)" ]; then
    git lfs install --skip-smudge
  fi

  if [ -n "$OS_UBUNTU" ]; then
    if [ -n "$UBUNTU_DESKTOP" ]; then
      # dark mode
      gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'

      # install vscode
      wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >/tmp/packages.microsoft.gpg
      sudo install -o root -g root -m 644 /tmp/packages.microsoft.gpg /etc/apt/trusted.gpg.d/
      sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
      sudo apt install apt-transport-https
      sudo apt install code

      # install Chromium
      sudo snap install chromium --channel latest/beta
    fi
    if [ -x "$(command -v cargo)" ]; then
      cargo install -f hyperfine
      cargo install exa
    fi
  fi

  # do some cleanup
  trash-empty 30
  # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
  ~/bin/trash-empty-wsl +30
  sudo tmpreaper --all --showdeleted 30d /tmp

  # remove cron warning
  sudo sed -i~ 's/^SHOWWARNING=true$/# SHOWWARNING=true/' /etc/tmpreaper.conf

  # remove the booring and verbose standard motd
  if [ -f /etc/motd ] && ! [ -f /etc/motd\~ ]; then
    pushd /etc
    sudo mv motd motd\~
    sudo touch motd
    popd
  fi

  if ! grep -q "$USR:.*zsh" /etc/passwd; then
    sudo chsh -s $(which zsh) $(whoami)
  fi

  # install fuzzy matcher (^R, Alt-C, ^T, **)
  if [ -x "$(command -v fzf)" ]; then
    pushd ~/.fzf
    git pull
    ./install --bin
    popd
  else
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --completion --key-bindings --no-update-rc
  fi

  if [ -z "$DOTFILES_LITE" ]; then
    # haskell
    if ! [ -x "$(command -v stack)" ]; then
      wget -qO- https://get.haskellstack.org/ | sh || true
    fi

    # install nodebrew, node version manager
    if ! [ -x "$(command -v nodebrew)" ]; then
      curl -L git.io/nodebrew | perl - setup
    fi
  fi

  # when it is needed, this updates the OS, so it will take a LONG time
  if [ -x "$(command -v do-release-upgrade)" ]; then
    sudo do-release-upgrade || true
  fi

  # no more Linux related things to do
  exit 0
fi
###############################################################################
# macOS
###############################################################################
if [ -d "/opt/homebrew/bin" ]; then
  export HOMEBREW_PREFIX=/opt/homebrew
  # the /usr/local path is hard coded n gpg-agent.conf
  sudo ln -fs $HOMEBREW_PREFIX/bin/pinentry-mac /usr/local/bin/pinentry-mac
else
  export HOMEBREW_PREFIX=/usr/local
fi
export HW_MODEL=${HW_MODEL:-$(sysctl -n hw.model)}

# overriding original path /usr/bin:/bin:/usr/sbin:/sbin with ${PATH_OVERRIDE} so that gpg and node will be on path for spotlight launched programs"
# not working on Big Sur?
PATH_OVERRIDE=$(getconf PATH):${HOME}/bin:${HOME}/.nodebrew/current/bin:$HOMEBREW_PREFIX/bin
sudo launchctl config user path $PATH_OVERRIDE

# if xcode has just been manually installed
sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
sudo git-lfs install --system

export WORKING_FROM_HOME=1
if [ -n "$WORKING_FROM_HOME" ]; then
  # enable startup sound
  if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
    sudo nvram StartupMute=%00
  else
    sudo nvram -d SystemAudioVolume
  fi
else
  if [[ ${HW_MODEL} == MacBook* ]]; then
    # stop startup sound
    if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
      sudo nvram StartupMute=%01
    else
      sudo nvram SystemAudioVolume=%80
    fi
  fi
fi

sudo xcodebuild -license accept

# speed up time machine backups until next reboot
sudo sysctl debug.lowpri_throttle_enabled=0

###############################################################################
# installations for Klarna
###############################################################################
if [[ $PROCESSOR_ARCHITECTURE != 'arm' ]] && [[ $PATH == */.rvm/* ]]; then
  echo "Ruby (should be rvm version\!): $(which ruby) $(ruby --version)"
  # is sudo really needed here? Hmm, yeah it might be
  sudo gem install cocoapods
  yes | sudo gem update --system
  yes | sudo gem update
  # this is the exact version required by `klapp doctor`, this doesn't really work
  yes | sudo gem install bundler:2.1.4
fi

###############################################################################
# bash4
###############################################################################
if ! grep -q "$HOMEBREW_PREFIX/bin/bash" "/etc/shells"; then
  sudo sh -c "echo $HOMEBREW_PREFIX/bin/bash >> /etc/shells"
fi
# chsh -s $HOMEBREW_PREFIX/bin/bash $(whoami)

###############################################################################
# zsh
###############################################################################
if ! grep -q "$HOMEBREW_PREFIX/bin/zsh" "/etc/shells"; then
  sudo sh -c "echo $HOMEBREW_PREFIX/bin/zsh >> /etc/shells"
fi
sudo chsh -s $HOMEBREW_PREFIX/bin/zsh $(whoami)

sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "This Mac belongs to Klas Mellbourn.\ne-mail: klas@mellbourn.net phone: +46 708 80 00 00\nReward offered for return of this Mac. No questions asked."
###############################################################################
# Update App Store apps
###############################################################################
# enable automatically "Install app updates" from the Mac App Store
sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool TRUE
# enable automatically "install macOS updates"
sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticallyInstallMacOSUpdates -bool true

# this will not install major updates, e.g. Catalina
sudo softwareupdate --schedule on
sudo softwareupdate -i -a --restart

# always boot in verbose mode (not MacOS GUI mode) - no longer seems to work on Big Sur
if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
  sudo nvram -d boot-args
else
  sudo nvram boot-args="-v"
fi

# Enable firewall. Possible values:
#   0 = off
#   1 = on for specific sevices
#   2 = on for essential services
sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1

# disable Gatekeeper, i.e. allow unsigned apps. Seems to be default at current customer
#sudo spctl --master-disable

# disable guest user
sudo sysadminctl -guestAccount off

# allow remote login
sudo systemsetup -setremotelogin on

# protect KeeWeb
sudo chown -R root /Applications/KeeWeb.app

# run customer specific bootstrap
. ${XDG_CONFIG_HOME:-$HOME/.config}/yadm/bootstrap-sudo-customer
