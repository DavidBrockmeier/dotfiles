#!/bin/bash
###############################################################################
# Klas Mellbourn's dotfile
#
# https://github.com/Mellbourn/dotfiles
# https://dotfiles.github.io/
#
# Many settings inspired by
# https://github.com/mathiasbynens/dotfiles/blob/master/.macos
#
# Nice links here
# https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789#.2d3cfjv7d
###############################################################################
set -e

if grep -q Raspbian /etc/os-release 2>/dev/null; then
  DOTFILES_LITE=1
fi
export PROCESSOR_ARCHITECTURE=${PROCESSOR_ARCHITECTURE:-$(uname -p)}

#pushd $HOME/.yadm-project
# is this necessary? we're not on master by default
#git switch master
# it the --remote flag doesn't work as expected, we need to do this
#git pull
#popd
yadm submodule update --init --recursive --remote

if [[ $(uname) == 'Darwin' ]]; then
  ###############################################################################
  # macOS specific installations
  ###############################################################################
  export OS_MAJOR_VERSION=$(sw_vers -productVersion | cut -d. -f1)
  BIG_SUR_MAJOR_VERSION=11

  # activate cleanup jobs, doesn't actually update?
  launchctl unload ~/Library/LaunchAgents/local.cleanup.downloads.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.downloads.plist
  launchctl unload ~/Library/LaunchAgents/local.cleanup.pictures.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.pictures.plist
  launchctl unload ~/Library/LaunchAgents/local.cleanup.resurrect.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.resurrect.plist
  launchctl unload ~/Library/LaunchAgents/local.cleanup.trash.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.trash.plist
  # they don't work, so run them anyway
  $HOME/bin/cleanup-directory -d $HOME/Downloads -l 10 -v
  $HOME/bin/cleanup-directory -d $HOME/Pictures -l 10 -v
  $HOME/bin/cleanup-directory -d $HOME/.tmux/resurrect -f \*/tmux_resurrect_\*.txt -l 5 -v
  $HOMEBREW_PREFIX/sbin/tmpreaper -vv 2d -T 180 $HOME/.Trash &

  ###############################################################################
  # App store                                                                   #
  ###############################################################################
  brew install mas || true

  # Xcode
  mas install 497799835
  mas lucky "Copy 'Em (Clipboard Manager)" # (2.9.0) 876540291
  if [[ $PROCESSOR_ARCHITECTURE != 'arm' ]]; then
    # these still require rosetta afaik
    mas lucky "John's Background Switcher" # 907640277
    mas lucky Bredbandskollen              # 1147976909
    # Microsoft Remote Desktop 10 1295203466
    mas lucky "Microsoft Remote Desktop"
  fi

  # upgrade all
  mas upgrade

  xcode-select --install || true

  ###############################################################################
  # Homebrew                                                                    #
  ###############################################################################

  if ! hash brew 2>/dev/null; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  brew cleanup
  brew update
  brew upgrade
  brew upgrade --cask
  brew tap aws/tap               # for aws-sam-cli
  brew tap git-time-metric/gtm   # for gtm
  brew tap wix/brew              # for AppleSimulatorUtils
  brew tap homebrew/cask-fonts   # for font-fira-code
  brew tap homebrew/cask-drivers # for philips-hue-sync and luna-display
  #brew tap homebrew/cask-versions # for visual-studio-code-insiders
  # enables searching brew for commands not found, e.g. when. https://github.com/Homebrew/homebrew-command-not-found
  brew tap homebrew/command-not-found

  # not all computers need logitech drivers, also, these need sudo
  # brew install --cask homebrew/cask-drivers/logitech-gaming-software
  # brew install --cask homebrew/cask-drivers/logitech-options

  brewSafeUninstall() {
    if brew list "$@" 2>/dev/null; then
      brew uninstall "$@"
    fi
  }

  # remove brews here that were previously installed, to sync between machines
  brewSafeUninstall --cask eve
  brewSafeUninstall --cask minikube
  brewSafeUninstall minikube
  brewSafeUninstall reactotron
  brewSafeUninstall python@2
  brewSafeUninstall googler
  brewSafeUninstall zsh-syntax-highlighting
  brewSafeUninstall --cask flipper
  brewSafeUninstall --cask font-cascadia-pl
  brew uninstall --force zplug
  # this forces you to enter password all the time
  #brew uninstall --cask --force intel-power-gadget

  if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then

    # this must be in alphabetical order!
    #add these eventually:
    # gradle (when java installed)
    # maven (when java installed)
    # haskell-stack (when cabal-install?)
    # mas (when it works)
    # mono (when arm64 supported)
    # shellcheck (cabal-install)
    # maybe hadolint (cabal-install) although I should probably use a vs code plugin like shell-format instead
    # wix/brew/applesimutils (not ready yet?)
    apps="
aws-sam-cli
awscli@1
bash
bash-completion
bat
cheat
cloc
coreutils
deno
diff-so-fancy
direnv
duti
exa
fd
findutils
fortune
fpp
fx
fzf
gcal
gettext
gh
git
git-crypt
git-delta
git-extras
git-lfs
git-number
git-recent
glances
gnu-sed
gnupg
graphicsmagick
grc
grep
gtm
highlight
htop
httpie
hyperfine
imagemagick
jq
kpcli
lastpass-cli
less
librsvg
lnav
lsd
ncdu
nginx
nodebrew
noti
parallel
pinentry-mac
pipenv
pkg-config
prettyping
pv
pyenv
pyenv-virtualenv
pyenv-virtualenvwrapper
react-native-cli
reattach-to-user-namespace
redis
ripgrep
croc
sd
speedtest-cli
stunnel
thefuck
tig
tldr
tmpreaper
tmux
transcrypt
trash
tree
vim
wakeonlan
watch
watchman
weechat
wemux
wget
yadm
yarn
z.lua
zoxide
zsh
zsh-autosuggestions
"
    # note: yarn will install node, which you might want to remove, since it is handled by nvm
    alreadyInstalled=$(brew list --formula)
    installTheseLines=$(comm -23 <(echo "$apps") <(echo "$alreadyInstalled"))
    installThese=${installTheseLines//$'\n'/ }
    if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
      echo $installThese | xargs brew install
    fi

    # TODO: add more: java8, google-chrome-beta, p4v philips-hue-sync launchcontrol plex private-internet-access
    casks="
bartender
font-cascadia-code-pl
font-fira-code
font-jetbrains-mono
google-chrome-beta
istat-menus
iterm2
keeweb
launchcontrol
moom
paletro
vlc
visual-studio-code
witch
"

    alreadyInstalled=$(brew list --cask)
    installTheseLines=$(comm -23 <(echo "$casks") <(echo "$alreadyInstalled"))
    installThese=${installTheseLines//$'\n'/ }
    if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
      echo $installThese | xargs brew install --cask
    fi

  fi # arm part ends

  # this must be in alphabetical order!
  apps="
aws-sam-cli
awscli@1
bash
bash-completion
bat
cheat
cloc
coreutils
deno
diff-so-fancy
direnv
duti
exa
fd
findutils
fortune
fpp
fx
fzf
gcal
gettext
gh
git
git-crypt
git-delta
git-extras
git-lfs
git-number
git-recent
glances
gnu-sed
gnupg
gradle
graphicsmagick
grc
grep
gtm
haskell-stack
highlight
htop
httpie
hyperfine
imagemagick
jq
kpcli
lastpass-cli
less
librsvg
lnav
lsd
mas
maven
mono
ncdu
nginx
nodebrew
noti
parallel
pinentry-mac
pipenv
pkg-config
prettyping
pv
pyenv
pyenv-virtualenv
pyenv-virtualenvwrapper
react-native-cli
reattach-to-user-namespace
redis
ripgrep
croc
shellcheck
sd
speedtest-cli
stunnel
thefuck
tig
tldr
tmpreaper
tmux
transcrypt
trash
tree
vim
wakeonlan
watch
watchman
weechat
wemux
wget
wix/brew/applesimutils
yadm
yarn
z.lua
zoxide
zsh
zsh-autosuggestions
"
  # note: yarn will install node, which you might want to remove, since it is handled by nvm
  alreadyInstalled=$(brew list --formula)
  installTheseLines=$(comm -23 <(echo "$apps") <(echo "$alreadyInstalled"))
  installThese=${installTheseLines//$'\n'/ }
  if [[ $PROCESSOR_ARCHITECTURE != 'arm' ]]; then
    echo $installThese | xargs brew install
  fi

  # not working, destroys existing installation: intel-power-gadget

  casks="
abstract
adobe-acrobat-reader
android-platform-tools
android-sdk
android-studio
bartender
charles
chromedriver
controlplane
dash
discord
docker
firefox
font-cascadia-code-pl
font-fira-code
font-jetbrains-mono
fork
google-backup-and-sync
google-chrome-beta
grandperspective
imageoptim
insomnia
istat-menus
iterm2
java8
jdiskreport
kdiff3
keeweb
keycue
launchcontrol
luna-display
mockoon
moom
p4v
paletro
philips-hue-sync
plex
pokerth
postman
private-internet-access
react-native-debugger
shortcat
skype
slack
spotify
tor-browser
tripmode
virtualbox
visual-studio-code
vlc
witch
zenmap
zeplin
zoom
"

  alreadyInstalled=$(brew list --cask)
  installTheseLines=$(comm -23 <(echo "$casks") <(echo "$alreadyInstalled"))
  installThese=${installTheseLines//$'\n'/ }
  if [[ $PROCESSOR_ARCHITECTURE != 'arm' ]]; then
    echo $installThese | xargs brew install --cask
  fi

  brew link --force gettext

  echo will cite | parallel --citation >/dev/null 2>&1

  # set up wemux user name
  sed -i -- "s/host_list=(brew)/host_list=($USER)/" $HOMEBREW_PREFIX/etc/wemux.conf
  sed -i -- 's/# allow_server_change="true"/allow_server_change="true"/' $HOMEBREW_PREFIX/etc/wemux.conf

  if [[ $PROCESSOR_ARCHITECTURE != 'arm' ]]; then
    # ruby version manager
    gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
    if ! hash rvm 2>/dev/null; then
      # trust download
      command curl -sSL https://rvm.io/mpapis.asc | gpg --import -
      # install rvm and latest ruby
      curl -sSL https://get.rvm.io | bash -s stable --ruby
    fi
    # update rvm
    rvm get stable
    # interesting ruby version
    rvm install ruby-2.4.1
    LATEST_STABLE_RUBY_VERSION=$(rvm list known | grep "\[ruby-\]" | grep -v "preview" | tail -1 | sed 's/\[ruby-\]\([0-9]*\.[0-9]\)*\[.*\]/\1/g')
    rvm install ruby-$LATEST_STABLE_RUBY_VERSION
    source ~/.rvm/scripts/rvm
    #rvm --default use ruby-$LATEST_STABLE_RUBY_VERSION
    # v2.4.1 required by dev environment
    rvm --default use ruby-2.4.1

    # pip no longer installable from pip3? not needed?
    #pip3 install --upgrade pip setuptools
    pip3 install virtualenvwrapper
    pip3 install autopep8 pylint rope
    # install tmux session manager
    pip3 install tmuxp -U
  fi

  if [ -d ~/.tmux/plugins ]; then
    for plugin in ~/.tmux/plugins/*; do
      pushd $plugin
      git pull
      git submodule update --init --recursive
      popd
    done
  fi

  # finish PIA installation
  # if you already have a manual installation, you will have to remove it with
  # rm -rf /Applications/Private\ Internet\ Access.app
  if [ ! -d /Applications/Private\ Internet\ Access.app ]; then
    RUNNER="$HOMEBREW_PREFIX/Caskroom/private-internet-access/v70/Private\ Internet\ Access\ Installer.app/Contents/MacOS/runner.sh"
    if [ -f "$RUNNER" ]; then
      "$RUNNER"
    fi
  fi

  # this is needed to suppress zsh message "compinit: insecure directories""
  chmod g-w $HOMEBREW_PREFIX/share ~/.zsh-personal-completions

fi ############################################################################
# configuration for both Mac and Linux
###############################################################################

# this seems healthy to do every now and then to make sure zsh completion works
trash ~/.zcompdump* ~/.zcompcache 2>/tmp/zcomp_delete_error.txt || true

# if, after yadm 3.0 migration, the old .yadm folder is empty, remove it
if [ -n "$(find "$HOME/.yadm" -maxdepth 0 -type d -empty 2>/dev/null)" ]; then
  trash $HOME/.yadm
fi

# TODO: eventually remove this removal
# remove obsolete folder for .zplugin, since it has been renamed to zinit
trash ~/.zplugin || true

if ! [ -f ~/.ssh/id_rsa ]; then
  ssh-keygen -t rsa -b 4096 -C "${USER}@$(hostname)" -f ~/.ssh/id_rsa -N ""
  eval $(ssh-agent -s)
  if [[ $(uname) == 'Darwin' ]]; then
    ssh-add -K ~/.ssh/id_rsa
  else
    ssh-add
  fi
  echo "Remember to add the new public key in ~/.ssh/id_rsa.pub to github and appropriate authorized_hosts."
fi

# Install `zinit` if not installed
if [ ! -d ~/.zinit ]; then
  mkdir ~/.zinit
  chmod go-w ~/.zinit # to avoid insecure directories complaint
  git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
fi
if [ -x "$(command -v zsh)" ]; then
  zsh -ic "zinit self-update; zinit update --all; zinit cclear"
fi

# TODO: eventually remove this removal
trash ~/.gitconfig.local || true

# set up alternate gitconfig file used to determine local settings
yadm alt

# supress Spotlight indexing of code folder
if [ "$CODE_DIR" ]; then
  mkdir -p $CODE_DIR
  touch $CODE_DIR/.metadata_never_index
  mkdir -p $CODE_DIR/private
  mkdir -p $CODE_DIR/experiments
fi

if [ -z "$DOTFILES_LITE" ]; then
  if [ -x "$(command -v $HOMEBREW_PREFIX/opt/nodebrew/bin/nodebrew)" ]; then
    $HOMEBREW_PREFIX/opt/nodebrew/bin/nodebrew setup_dirs
  fi
  if [ -x "$(command -v nodebrew)" ]; then
    nodebrew selfupdate
    nodebrew install-binary latest || true
    if ! [ -x "$(command -v node)" ]; then
      # if no node is present, definitely use the latest
      nodebrew use latest
    fi
  fi

  if [ -x "$(command -v tldr)" ]; then
    tldr --update
  elif [ -x "$(command -v yarn)" ]; then
    yarn global add tldr
  fi

  ###############################################################################
  # development
  ###############################################################################
  # TODO: remove this when global eslint has been removed everywhere
  if [ -x "$(command -v eslint)" ]; then
    yarn global remove eslint
  fi
fi

function zsh_performance_measurements() {
  ~/bin/mezsh -m 5
}

############################################################################
# configuration for just Linux
###############################################################################
if [[ $(uname) == 'Linux' ]]; then

  # do some cleanup
  if [ -x "$(command -v trash-empty)" ]; then
    trash-empty 30
  fi
  # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
  ~/bin/trash-empty-wsl +30

  zsh_performance_measurements
  exit 0
fi ############################################################################
# mac specific configurations
###############################################################################

if ! [ -f ~/.fzf.$(basename $SHELL) ]; then
  $HOMEBREW_PREFIX/opt/fzf/install --key-bindings --completion --no-update-rc
fi

###############################################################################
# development
###############################################################################
npm i -g npm node-gyp
# yarn 2 should not be installed globally!
#npm i -g yarn@berry
npm rm -g eslint
npm update -g
# save some disk
xcrun simctl delete unavailable

# remove itunes from login items. This way it does not open when you plug in an iPhone
osascript -e 'tell application "System Events" to delete login item "iTunesHelper"' 2>/tmp/delete_itunes_helper_error.txt || true

docker system prune -f 2>>/tmp/docker_system_prune.err.txt || true

###############################################################################
# Associate filetypes to apps that should open them                           #
###############################################################################
# open in Visual Studio Code
duti -s com.microsoft.VSCode .graphql all
duti -s com.microsoft.VSCode .js all                         # javascript. Look extensions works too!
duti -s com.microsoft.VSCode .rb all                         # ruby. Look extensions works too!
duti -s com.microsoft.VSCode .ts all                         # typescript. Look extensions works too!
duti -s com.microsoft.VSCode com.apple.log all               # .log
duti -s com.microsoft.VSCode net.daringfireball.markdown all # .md
duti -s com.microsoft.VSCode public.json all
duti -s com.microsoft.VSCode public.plain-text all    # text files
duti -s com.microsoft.VSCode public.python-script all # .py
#duti -s com.microsoft.VSCode public.shell-script all # .sh - no, you want it to be executable
duti -s com.microsoft.VSCode public.source-code all # this has no effect?
duti -s com.microsoft.VSCode public.text all        # does this have a real effect?
duti -s com.microsoft.VSCode public.xml all
duti -s com.microsoft.VSCode public.yaml all
# seems to have no effecxt: public.data, .lock
# open in chrome
duti -s com.google.chrome public.svg-image all # .svg
# prefer vlc over quicktime
duti -s org.videolan.vlc .avi Viewer

###############################################################################
# Finder                                                                      #
###############################################################################
# show hidden files
defaults write com.apple.finder AppleShowAllFiles -bool true
# Show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
# Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true
# Show Path bar in Finder
defaults write com.apple.finder ShowPathbar -bool true
# Use list view in all Finder windows by default (won't affect folders where there is already a DS_Store)
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
# hide all icons on from desktop
defaults write com.apple.finder CreateDesktop -bool false
# Remove items from the Trash after 30 days
defaults write com.apple.finder FXRemoveOldTrashItems -bool true
# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
# show "Quit" menu item for finder
defaults write com.apple.finder QuitMenuItem -bool true

###############################################################################
# Sound                                                                       #
###############################################################################
# Play feedback when volume is changed
defaults write -g com.apple.sound.beep.feedback -int 1
# Change the alert beep sound
if [ -f /System/Library/Sounds/Pop.aiff ]; then
  defaults write .GlobalPreferences com.apple.sound.beep.sound /System/Library/Sounds/Pop.aiff
fi

###############################################################################
# Performance                                                                 #
###############################################################################
# reduce transparency to make WindowServer take less CPU, but looks like shit
#defaults write com.apple.universalaccess reduceTransparency 1

###############################################################################
# Miscellaneous                                                               #
###############################################################################
# Save screenshots to Pictures
defaults write com.apple.screencapture location "${HOME}/Pictures"

# don't restore images in preview
defaults write com.apple.Preview NSQuitAlwaysKeepsWindows -bool false

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Make animated dialog boxes, like the save, appear faster (0.2 is default)
# did this make dialogs appear slower?
#defaults write NSGlobalDomain NSWindowResizeTime .05

# Expand print panel by default - these don't work anymore? (but expanded state is preserved between restarts)
#defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
#defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# restore window position when you restart an application
defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool true

# show battery percent
defaults write com.apple.menuextra.battery ShowPercent YES

# make clock show only time, so it can be clickable in Big Sur (to show notification center)
defaults write com.apple.menuextra.clock DateFormat -string "HH:mm"

# set TextEdit default format to plain text
defaults write com.apple.TextEdit RichText -int 0

# smoother font on low DPI https://code.visualstudio.com/updates/v1_28#_blurriness-on-macos-mojave
# Apple doesn't intend to support this option https://intellij-support.jetbrains.com/hc/en-us/articles/360016827360-Reporting-font-rendering-problems
#defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
defaults delete CGFontRenderingFontSmoothingDisabled || true

###############################################################################
# Mouse & Trackpad                                                            #
###############################################################################
# show in menu bar - these files no longer present in Big Sur
#defaults write com.apple.systemuiserver menuExtras -array "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" "/System/Library/CoreServices/Menu Extras/Volume.menu"
# increase trackpad tracking speed - works!
defaults write -g com.apple.trackpad.scaling -float 3.0
# increase mouse tracking speed
defaults write -g com.apple.mouse.scaling -float 3.0
# Trackpad: enable tap to click for this user and for the login screen - don't work!
#defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
#defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
#defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode TwoButton
# Smart zoom disabled, double-tap with one finger (set to 1 to enable) (already default?)
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseOneFingerDoubleTapGesture -int 0
# Double-tap with two fingers to Mission Control (set to 0 to disable) (already default?)
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseTwoFingerDoubleTapGesture -int 3
# Two finger horizontal swipe
# 0 = Swipe between pages with one finger
# 1 = Swipe between pages
# 2 = Swipe between full screen apps with two fingers, swipe between pages with one finger (already default?)
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseTwoFingerHorizSwipeGesture -int 2

###############################################################################
# Calendar                                                                    #
###############################################################################
# Show week numbers (10.8 only)
defaults write com.apple.iCal "Show Week Numbers" -bool true
# disable Show invitation messages in Notification Center
defaults write com.apple.iCal InvitationNotificationsDisabled -int 1
# disable Time to Leave alert - this seems unnecessary to disable
#defaults write com.apple.iCal TimeToLeaveEnabled  -int 0

###############################################################################
# Keyboard                                                                    #
###############################################################################
# THESE SEEM DANGEROUS, NOT CONSISTENT, destroys key repeat in Chrome?
# Set a blazingly fast keyboard repeat rate
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 25

# Disable smart quotes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable smart dashes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

# Use all F1, F2, etc keys as standard function keys
defaults write -g com.apple.keyboard.fnState -bool true

###############################################################################
# Dock                                                                        #
###############################################################################
# autohide dock - my screen realestate is valuable!
defaults write com.apple.dock autohide -bool true
# Set the icon size of Dock items to 24 pixels
defaults write com.apple.dock tilesize -int 24
# Make Dock icons of hidden applications translucent
defaults write com.apple.dock showhidden -bool true

if (($OS_MAJOR_VERSION < $BIG_SUR_MAJOR_VERSION)); then
  ###############################################################################
  # Safari & WebKit                                                             #
  ###############################################################################
  # Show status bar
  defaults write com.apple.Safari ShowStatusBar -bool true
  defaults write com.apple.Safari ShowOverlayStatusBar -bool true
  # Show the full URL in the address bar (note: this still hides the scheme)
  defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
  # Safari opens with: last session
  defaults write com.apple.Safari AlwaysRestoreSessionAtLaunch -bool true
  # Set Safari’s home page to `about:blank` for faster loading - doesn't have effect anymore?
  defaults write com.apple.Safari HomePage -string "about:blank"
  # Enable the Develop menu and the Web Inspector in Safari
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  # Enable Safari’s debug menu
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
  # Update extensions automatically
  defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true
  # Make Safari’s search banners default to Contains instead of Starts With
  defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false
  # Website use of location services
  # 0 = Deny without prompting
  # 1 = Prompt for each website once each day
  # 2 = Prompt for each website one time only
  defaults write com.apple.Safari SafariGeolocationPermissionPolicy -int 2
fi

# run customer specific bootstrap
. ${XDG_CONFIG_HOME:-$HOME/.config}/yadm/bootstrap-customer

brew doctor
zsh_performance_measurements
