#!/bin/bash


###############################################################################
# Linux (and Windows Subsystem for Linux)                                     #
###############################################################################
if [[ `uname` == 'Linux' ]]; then
  sudo add-apt-repository -y ppa:aacebedo/fasd
  # add repo to get newest git
  sudo add-apt-repository -y ppa:git-core/ppa
  # add repo to get newest tmux
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install -y \
    zsh \
    build-essential \
    git \
    yadm \
    python-pip \
    python3-pip \
    cargo \
    tmux-next \
    direnv \
    highlight \
    fasd \
    trash-cli \
    tree \
    tig \
    aptitude \

  sudo -H pip install --upgrade pip
  sudo -H pip3 install --upgrade pip
  sudo -H pip install virtualenv virtualenvwrapper
  sudo -H pip3 install thefuck

  # overwrite old tmux
  sudo ln -sf /usr/bin/tmux-next /usr/bin/tmux

  # do some cleanup
  trash-empty 30
  # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
  find /mnt/c/.Trash -mindepth 1 -mtime +30 -delete

  if  [[ $SHELL != *zsh ]];
  then
    chsh -s $(which zsh)
  fi

  # haskell
  if ! [ -x "$(command -v stack)" ]; then
    wget -qO- https://get.haskellstack.org/ | sh
  fi

  # install ripgrep, depends on haskell
  if ! [ -f ~/.cargo/bin/rg ]; then
    cargo install ripgrep
  fi

  # install nodebrew, node version manager
  if ! [ -x "$(command -v nodebrew)" ]; then
    curl -L git.io/nodebrew | perl - setup
  fi

  # install fuzzy matcher (^R, **)
  if ! [ -x "$(command -v fzf)" ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install
  fi

  # install zplug
  if [[ ! -d ~/.zplug ]]; then
    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh| zsh
  fi

  # this is needed to suppress zsh message "compinit: insecure directories"
  sudo chmod -R 755 $ZPLUG_REPOS

  # no more Linux related things to do
  exit 0
fi
###############################################################################
# macOS
###############################################################################

if ! [ -x "$(command -v fzf)" ]; then
  /usr/local/opt/fzf/install
fi

# stop startup sound
sudo nvram SystemAudioVolume=%80
sudo xcodebuild -license accept
# Add Watch Simulator to Launchpad
sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app" "/Applications/Simulator.app"

###############################################################################
# installations for Klarna
###############################################################################
sudo gem install cocoapods
sudo gem install bundler
# for chrome debugging
gem install ruby-debug-ide -v 0.6.0
gem install debase -v 0.2.2.beta10

###############################################################################
# bash4
###############################################################################
if ! grep -q "/usr/local/bin/bash" "/etc/shells"; then
   sudo sh -c 'echo /usr/local/bin/bash >> /etc/shells'
fi
# chsh -s /usr/local/bin/bash $SUDO_USER

###############################################################################
# fish
###############################################################################
if ! grep -q fish "/etc/shells"; then
   sudo sh -c 'echo /usr/local/bin/fish >> /etc/shells'
fi

###############################################################################
# zsh
###############################################################################
if ! grep -q "/usr/local/bin/zsh" "/etc/shells"; then
   sudo sh -c 'echo /usr/local/bin/zsh >> /etc/shells'
fi
chsh -s /usr/local/bin/zsh $SUDO_USER


###############################################################################
# Update App Store apps
###############################################################################
# enable automatically "Install app updates" from the Mac App Store
sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool TRUE
# enable automatically "install macOS updates"
sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdateRestartRequired -bool TRUE

# TODO: turn on this when ok to upgrade macOS at work
sudo softwareupdate -i -a

# always boot in verbose mode (not MacOS GUI mode)
sudo nvram boot-args="-v"

# Enable firewall. Possible values:
#   0 = off
#   1 = on for specific sevices
#   2 = on for essential services
sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1

# allow remote login
sudo systemsetup -setremotelogin on
